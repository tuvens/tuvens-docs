#!/bin/bash

# Branch Check Command
# Simple validation tool for current repository state

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "üîç Branch Protection Check"
echo "=========================="
echo ""

# Get current branch
# Use GitHub Actions environment variables if available, otherwise fallback to git
if [ -n "$GITHUB_HEAD_REF" ]; then
    CURRENT_BRANCH="$GITHUB_HEAD_REF"
else
    CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || echo "HEAD")
fi
echo -e "${BLUE}Current branch:${NC} $CURRENT_BRANCH"
echo ""

# Check 1: Branch naming convention
echo "1Ô∏è‚É£ Branch Naming Convention"
echo "----------------------------"

if [ "$CURRENT_BRANCH" = "HEAD" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Detached HEAD state${NC}"
    echo "   No branch naming validation needed"
elif [[ "$CURRENT_BRANCH" =~ ^(vibe-coder|docs-orchestrator|devops|laravel-dev|react-dev|node-dev|svelte-dev)/(feature|bugfix|docs|workflow|hotfix|refactor)/[a-z0-9-]+$ ]]; then
    echo -e "${GREEN}‚úÖ Branch naming follows conventions${NC}"
    echo "   Format: $(echo $CURRENT_BRANCH | sed 's/\/.*/ ‚Üí /' | sed 's/->.*//')$(echo $CURRENT_BRANCH | cut -d'/' -f2) ‚Üí $(echo $CURRENT_BRANCH | cut -d'/' -f3-)"
else
    echo -e "${RED}‚ùå Branch naming violation${NC}"
    echo "   Current: $CURRENT_BRANCH"
    echo "   Required: {agent}/{type}/{description}"
    echo ""
    echo -e "${YELLOW}Valid agents:${NC} vibe-coder, docs-orchestrator, devops, laravel-dev, react-dev, node-dev, svelte-dev"
    echo -e "${YELLOW}Valid types:${NC} feature, bugfix, docs, workflow, hotfix, refactor"
fi
echo ""

# Check 2: CLAUDE.md validation
echo "2Ô∏è‚É£ CLAUDE.md Safety File"
echo "-------------------------"

if [ ! -f "CLAUDE.md" ]; then
    echo -e "${RED}‚ùå CLAUDE.md file missing${NC}"
    echo "   This file is required for repository safety"
else
    echo -e "${GREEN}‚úÖ CLAUDE.md exists${NC}"
    
    # Check required sections
    REQUIRED_SECTIONS=(
        "Critical Claude Code Safety Rules"
        "Mandatory Branch Naming Conventions"
        "Pull Request Target Branch Rules"
        "Emergency Branch Recovery Procedures"
        "Testing Protocol Requirements"
        "Repository-Specific Safety Rules"
    )
    
    MISSING_SECTIONS=()
    for section in "${REQUIRED_SECTIONS[@]}"; do
        if ! grep -q "$section" CLAUDE.md; then
            MISSING_SECTIONS+=("$section")
        fi
    done
    
    if [ ${#MISSING_SECTIONS[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ All required sections present${NC}"
    else
        echo -e "${RED}‚ùå Missing sections:${NC}"
        for missing in "${MISSING_SECTIONS[@]}"; do
            echo "   ‚Ä¢ $missing"
        done
    fi
    
    # Check 5-branch strategy
    if grep -q "main ‚Üê stage ‚Üê test ‚Üê dev ‚Üê feature" CLAUDE.md; then
        echo -e "${GREEN}‚úÖ 5-branch strategy documented${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  5-branch strategy not clearly documented${NC}"
    fi
fi
echo ""

# Check 3: Protected branch safety
echo "3Ô∏è‚É£ Protected Branch Safety"
echo "---------------------------"

PROTECTED_BRANCHES=("main" "stage" "test")
if printf '%s\n' "${PROTECTED_BRANCHES[@]}" | grep -q "^$CURRENT_BRANCH$"; then
    echo -e "${RED}‚ö†Ô∏è  Currently on protected branch: $CURRENT_BRANCH${NC}"
    echo "   Direct commits to this branch violate safety rules"
    echo "   Switch to a feature branch before making changes"
else
    echo -e "${GREEN}‚úÖ Not on protected branch${NC}"
fi
echo ""

# Check 4: Staging area safety
echo "4Ô∏è‚É£ Staging Area Safety"
echo "-----------------------"

# Check for staged changes that might violate safety rules
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No staged changes${NC}"
else
    echo -e "${BLUE}Staged files:${NC}"
    echo "$STAGED_FILES" | sed 's/^/   ‚Ä¢ /'
    
    # Check for potential issues
    ISSUES=()
    
    # Check for workflow changes
    if echo "$STAGED_FILES" | grep -q "\.github/workflows/"; then
        ISSUES+=("Workflow changes detected - ensure proper review")
    fi
    
    # Check for important file deletions
    IMPORTANT_FILES=("CLAUDE.md" "README.md" "package.json")
    for file in "${IMPORTANT_FILES[@]}"; do
        if git diff --cached --name-status | grep -q "^D.*$file$"; then
            ISSUES+=("Deleting important file: $file")
        fi
    done
    
    if [ ${#ISSUES[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ No obvious safety issues in staged files${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Potential issues:${NC}"
        for issue in "${ISSUES[@]}"; do
            echo "   ‚Ä¢ $issue"
        done
    fi
fi
echo ""

# Check 5: Pre-commit hooks
echo "5Ô∏è‚É£ Pre-commit Hooks"
echo "--------------------"

if [ -f ".pre-commit-config.yaml" ]; then
    echo -e "${GREEN}‚úÖ Pre-commit configuration exists${NC}"
    
    # Check if pre-commit is installed
    if command -v pre-commit >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ pre-commit tool is installed${NC}"
        
        # Check if hooks are installed
        if pre-commit --version >/dev/null 2>&1 && [ -d ".git/hooks" ]; then
            echo -e "${GREEN}‚úÖ Pre-commit hooks likely installed${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Pre-commit hooks may not be installed${NC}"
            echo "   Run: pre-commit install"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  pre-commit tool not installed${NC}"
        echo "   Install: pip install pre-commit"
    fi
    
    # Check hook scripts exist
    HOOK_SCRIPTS=(
        "scripts/hooks/check-branch-naming.sh"
        "scripts/hooks/check-protected-branches.sh"
        "scripts/hooks/validate-claude-md.sh"
        "scripts/hooks/check-safety-rules.sh"
    )
    
    MISSING_HOOKS=()
    for hook in "${HOOK_SCRIPTS[@]}"; do
        if [ ! -f "$hook" ]; then
            MISSING_HOOKS+=("$hook")
        fi
    done
    
    if [ ${#MISSING_HOOKS[@]} -eq 0 ]; then
        echo -e "${GREEN}‚úÖ All hook scripts present${NC}"
    else
        echo -e "${RED}‚ùå Missing hook scripts:${NC}"
        for hook in "${MISSING_HOOKS[@]}"; do
            echo "   ‚Ä¢ $hook"
        done
    fi
else
    echo -e "${RED}‚ùå No pre-commit configuration${NC}"
    echo "   Create .pre-commit-config.yaml for safety hooks"
fi
echo ""

# Summary
echo "üìã Summary"
echo "==========="

# Count checks
TOTAL_CHECKS=5
PASSED_CHECKS=0

# Determine passed checks (simplified logic)
if [[ "$CURRENT_BRANCH" =~ ^(vibe-coder|docs-orchestrator|devops|laravel-dev|react-dev|node-dev|svelte-dev)/(feature|bugfix|docs|workflow|hotfix|refactor)/[a-z0-9-]+$ ]] || [ "$CURRENT_BRANCH" = "HEAD" ]; then
    ((PASSED_CHECKS++))
fi

if [ -f "CLAUDE.md" ]; then
    ((PASSED_CHECKS++))
fi

if ! printf '%s\n' "${PROTECTED_BRANCHES[@]}" | grep -q "^$CURRENT_BRANCH$"; then
    ((PASSED_CHECKS++))
fi

if [ -z "$(git diff --cached --name-only)" ]; then
    ((PASSED_CHECKS++))
fi

if [ -f ".pre-commit-config.yaml" ]; then
    ((PASSED_CHECKS++))
fi

if [ $PASSED_CHECKS -eq $TOTAL_CHECKS ]; then
    echo -e "${GREEN}üéâ All checks passed! ($PASSED_CHECKS/$TOTAL_CHECKS)${NC}"
    echo "   Your branch is ready for development"
elif [ $PASSED_CHECKS -ge 3 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Most checks passed ($PASSED_CHECKS/$TOTAL_CHECKS)${NC}"
    echo "   Review the issues above before proceeding"
else
    echo -e "${RED}‚ùå Multiple issues found ($PASSED_CHECKS/$TOTAL_CHECKS)${NC}"
    echo "   Address safety violations before development"
fi

echo ""
echo "üîß Quick fixes:"
echo "  ‚Ä¢ branch-check          - Run this tool again"
echo "  ‚Ä¢ pre-commit install    - Install pre-commit hooks"
echo "  ‚Ä¢ pre-commit run --all  - Test all hooks"
echo ""
echo "üìñ Documentation: CLAUDE.md, .pre-commit-config.yaml"

# Ensure script exits with success code when checks pass
exit 0