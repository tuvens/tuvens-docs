#!/usr/bin/env bash
# Git Hook: pre-push  
# Purpose: Set status to REVIEWING when pushing to branch with PR
# Part of Phase 2 iTerm2 Status Automation

# Read input from git (remote and URL)
while read local_ref local_sha remote_ref remote_sha; do
    # Skip if deleting branch
    if [[ "$local_sha" == "0000000000000000000000000000000000000000" ]]; then
        continue
    fi
    
    # Get branch name from ref
    BRANCH_NAME="${local_ref#refs/heads/}"
    
    # Source the automation scripts
    REPO_ROOT="$(git rev-parse --show-toplevel)"
    SCRIPTS_DIR="$REPO_ROOT/agentic-development/scripts"
    
    # Only proceed if we have the automation scripts
    if [[ ! -f "$SCRIPTS_DIR/status-determination-engine.sh" ]]; then
        continue
    fi
    
    # Source shared functions and status determination engine
    if ! source "$SCRIPTS_DIR/shared-functions.sh" 2>/dev/null; then
        echo "Warning: Shared functions unavailable" >&2
        continue
    fi
    
    if ! source "$SCRIPTS_DIR/status-determination-engine.sh" 2>/dev/null; then
        echo "Warning: Status automation unavailable" >&2
        continue
    fi
    
    # Get issue number
    ISSUE_NUMBER=""
    if [[ -f "$REPO_ROOT/.github-issue" ]]; then
        ISSUE_NUMBER="$(cat "$REPO_ROOT/.github-issue")"
    elif [[ "$BRANCH_NAME" =~ [/#]([0-9]+) ]]; then
        ISSUE_NUMBER="${BASH_REMATCH[1]}"
    fi
    
    # Only proceed if we have an issue number
    if [[ -z "$ISSUE_NUMBER" ]]; then
        continue
    fi
    
    # Get agent name from branch
    AGENT_NAME=""
    if [[ "$BRANCH_NAME" =~ ^([a-z-]+)/ ]]; then
        AGENT_NAME="${BASH_REMATCH[1]}"
    fi
    
    # Check if there's an open PR for this branch
    PR_NUMBER="$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' 2>/dev/null || echo "")"
    
    if [[ -n "$PR_NUMBER" ]]; then
        # Check if PR is draft
        IS_DRAFT="$(gh pr view "$PR_NUMBER" --json isDraft --jq '.isDraft' 2>/dev/null || echo "false")"
        
        if [[ "$IS_DRAFT" == "false" ]]; then
            NEW_STATUS="reviewing"
            
            # Update GitHub labels using shared function
            update_github_issue_status "$ISSUE_NUMBER" "$NEW_STATUS"
            
            # Update iTerm2 status
            if [[ -n "$AGENT_NAME" ]] && command -v "$SCRIPTS_DIR/iterm-status-updater.sh" >/dev/null 2>&1; then
                "$SCRIPTS_DIR/iterm-status-updater.sh" "$ISSUE_NUMBER" &
            fi
            
            # Log the status change
            printf '%s: Push to PR branch triggered status change - Issue #%s -> %s\n' "$(date)" "$ISSUE_NUMBER" "$NEW_STATUS" >> "$REPO_ROOT/.git/status-automation.log"
        fi
    fi
done