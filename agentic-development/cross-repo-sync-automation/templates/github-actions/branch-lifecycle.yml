# Tuvens Branch Lifecycle Tracking
# This file should be copied to .github/workflows/branch-lifecycle.yml in each repository

name: Branch Lifecycle Tracking
on:
  push:
    branches:
      - 'feature/**'
      - 'fix/**' 
      - 'docs/**'
      - dev
      - test
      - stage
      - main
  create:
  delete:
  pull_request:
    types: [opened, closed, synchronize]
    branches: [dev, test, stage, main]

jobs:
  track-branch-event:
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch info
        id: branch_info
        run: |
          # Get repository name
          echo "repo=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
          echo "full_repo=${GITHUB_REPOSITORY}" >> $GITHUB_OUTPUT
          
          # Handle different event types
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
            echo "event=pushed" >> $GITHUB_OUTPUT
            echo "author=${GITHUB_ACTOR}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "create" ]; then
            echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
            echo "event=created" >> $GITHUB_OUTPUT
            echo "author=${GITHUB_ACTOR}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "delete" ]; then
            echo "branch=${{ github.event.ref }}" >> $GITHUB_OUTPUT
            echo "event=deleted" >> $GITHUB_OUTPUT
            echo "author=${GITHUB_ACTOR}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
            echo "target_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
            echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
            if [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              # CRITICAL: Check if merged into dev - this triggers cleanup
              if [ "${{ github.event.pull_request.base.ref }}" = "dev" ]; then
                echo "event=merged_into_dev" >> $GITHUB_OUTPUT
              else
                echo "event=merged" >> $GITHUB_OUTPUT
              fi
              echo "merged_by=${{ github.event.pull_request.merged_by.login }}" >> $GITHUB_OUTPUT
            else
              echo "event=pr_${{ github.event.action }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Extract change type from branch name
        id: change_type
        run: |
          branch="${{ steps.branch_info.outputs.branch }}"
          if [[ $branch =~ ^([^/]+)/.* ]]; then
            echo "type=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "type=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: environment
        run: |
          branch="${{ steps.branch_info.outputs.branch }}"
          case $branch in
            main)
              echo "env=production" >> $GITHUB_OUTPUT
              ;;
            stage)  
              echo "env=staging" >> $GITHUB_OUTPUT
              ;;
            dev)
              echo "env=development" >> $GITHUB_OUTPUT
              ;;
            test)
              echo "env=testing" >> $GITHUB_OUTPUT
              ;;
            feature/*|fix/*|docs/*)
              echo "env=development" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "env=unknown" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Check if this is an automation commit
        id: automation_check
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ \[skip\ ci\]|\[ci\ skip\]|^docs:.*auto-update|^track:|^automated: ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "ðŸ¤– Skipping automated commit: $COMMIT_MSG"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "ðŸ‘¤ Processing user commit: $COMMIT_MSG"
          fi
          
      - name: Update central tracking
        if: steps.automation_check.outputs.skip == 'false' && steps.branch_info.outputs.event != 'pr_synchronize'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.TUVENS_DOCS_TOKEN }}
          repository: tuvens/tuvens-docs
          event-type: branch-lifecycle
          client-payload: |
            {
              "event": "${{ steps.branch_info.outputs.event }}",
              "repository": "${{ steps.branch_info.outputs.repo }}",
              "fullRepository": "${{ steps.branch_info.outputs.full_repo }}",
              "branch": "${{ steps.branch_info.outputs.branch }}",
              "targetBranch": "${{ steps.branch_info.outputs.target_branch }}",
              "changeType": "${{ steps.change_type.outputs.type }}",
              "environment": "${{ steps.environment.outputs.env }}",
              "author": "${{ steps.branch_info.outputs.author }}",
              "mergedBy": "${{ steps.branch_info.outputs.merged_by }}",
              "timestamp": "${{ github.event.head_commit.timestamp || github.event.created_at || github.event.updated_at }}",
              "githubUrl": "${{ github.event.repository.html_url }}/tree/${{ steps.branch_info.outputs.branch }}",
              "pullRequestUrl": "${{ github.event.pull_request.html_url }}",
              "commitSha": "${{ github.sha }}"
            }

      - name: Create branch context summary
        if: steps.branch_info.outputs.event == 'created'
        run: |
          echo "## ðŸŒŸ New Branch Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Branch Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ steps.branch_info.outputs.repo }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ steps.branch_info.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Change Type**: \`${{ steps.change_type.outputs.type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ steps.environment.outputs.env }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: @${{ steps.branch_info.outputs.author }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Expected Worktree" >> $GITHUB_STEP_SUMMARY
          echo "\`~/Code/Tuvens/${{ steps.branch_info.outputs.repo }}/worktrees/${{ steps.branch_info.outputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Tracked in central branch index" >> $GITHUB_STEP_SUMMARY
          echo "2. Available for task group coordination" >> $GITHUB_STEP_SUMMARY
          echo "3. Automatic cleanup when merged" >> $GITHUB_STEP_SUMMARY