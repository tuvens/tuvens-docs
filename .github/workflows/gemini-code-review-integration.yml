name: Gemini Code Review Integration

on:
  # Webhook from external systems that send Gemini code review feedback
  repository_dispatch:
    types: [gemini-code-review]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      test_payload:
        description: 'Test payload for Gemini feedback'
        required: false
        type: string

jobs:
  process-gemini-feedback:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.TUVENS_DOCS_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract feedback data
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "payload=${{ github.event.inputs.test_payload }}" >> $GITHUB_OUTPUT
          else
            echo "payload=${{ toJson(github.event.client_payload) }}" >> $GITHUB_OUTPUT
          fi

      - name: Process Gemini feedback
        id: process
        run: |
          node agentic-development/scripts/process-gemini-feedback.js \
            --payload='${{ steps.extract.outputs.payload }}'

      - name: Create GitHub issue for critical feedback
        if: steps.process.outputs.create_issue == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TUVENS_DOCS_TOKEN }}
          script: |
            const feedback = JSON.parse('${{ steps.process.outputs.feedback_data }}');
            
            const issue = await github.rest.issues.create({
              owner: feedback.repository.split('/')[0],
              repo: feedback.repository.split('/')[1],
              title: `ðŸ¤– Gemini Code Review: ${feedback.title}`,
              body: `# Gemini Code Review Feedback

## Summary
${feedback.summary}

## Priority: ${feedback.priority}
**Category**: ${feedback.category}
**Branch**: ${feedback.branch}
**PR**: ${feedback.pull_request ? `#${feedback.pull_request}` : 'N/A'}

## Feedback Details
${feedback.details}

## Code Location
${feedback.file_path ? `**File**: \`${feedback.file_path}\`` : ''}
${feedback.line_numbers ? `**Lines**: ${feedback.line_numbers}` : ''}

## Recommended Actions
${feedback.recommendations.map(rec => `- ${rec}`).join('\n')}

## Agent Assignment
${feedback.priority === 'critical' ? `**ðŸš¨ Critical**: Auto-assigning to ${feedback.suggested_agent} agent` : `**Suggested Agent**: ${feedback.suggested_agent}`}

---
*Generated by Gemini Code Review Integration*
*Feedback ID: ${feedback.feedback_id}*
*Generated at: ${feedback.timestamp}*`,
              labels: [
                'gemini-feedback',
                `priority-${feedback.priority}`,
                `category-${feedback.category}`,
                feedback.suggested_agent
              ],
              assignees: feedback.priority === 'critical' ? ['tuvens'] : []
            });

            console.log(`Created issue #${issue.data.number} for Gemini feedback`);
            
            // Update process output with issue number
            return { issueNumber: issue.data.number };

      - name: Trigger agent session for critical feedback
        if: steps.process.outputs.trigger_agent == 'true'
        run: |
          node agentic-development/scripts/trigger-agent-session.js \
            --repository="${{ steps.process.outputs.target_repository }}" \
            --branch="${{ steps.process.outputs.target_branch }}" \
            --agent="${{ steps.process.outputs.suggested_agent }}" \
            --issue="${{ steps.process.outputs.issue_number }}" \
            --feedback-id="${{ steps.process.outputs.feedback_id }}" \
            --priority="${{ steps.process.outputs.priority }}"

      - name: Update branch tracking
        run: |
          node agentic-development/scripts/update-branch-tracking.js \
            --event-type="gemini-feedback" \
            --payload='${{ steps.process.outputs.tracking_payload }}'

      - name: Commit tracking updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Gemini Integration"
          git add agentic-development/branch-tracking/
          if git diff --staged --quiet; then
            echo "No tracking changes to commit"
          else
            git commit -m "feat: update branch tracking - gemini feedback processed"
            git push
          fi

      - name: Log integration results
        run: |
          echo "âœ… Gemini integration processing complete"
          echo "   - Feedback ID: ${{ steps.process.outputs.feedback_id }}"
          echo "   - Priority: ${{ steps.process.outputs.priority }}"
          echo "   - Issue Created: ${{ steps.process.outputs.create_issue }}"
          echo "   - Agent Triggered: ${{ steps.process.outputs.trigger_agent }}"