name: Notify Repositories of Documentation Updates

on:
  workflow_dispatch:  # Allow manual triggering for testing
  push:
    branches: [main, test]  # Added test branch for testing workflows
    paths:
      - 'tuvens-docs/integration-guides/**'
      - 'tuvens-docs/implementation-guides/**'  
      - 'tuvens-docs/shared-protocols/**'
      - 'tuvens-docs/integration-examples/**'
      - 'tuvens-docs/claude-templates/**'
      - 'tuvens-docs/setup.sh'
      - 'tuvens-docs/README.md'
      - 'tuvens-docs/CONTRIBUTING.md'

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.changes.outputs.has-changes }}
      changed-files: ${{ steps.changes.outputs.changed-files }}
      commit-message: ${{ steps.changes.outputs.commit-message }}
      commit-sha: ${{ steps.changes.outputs.commit-sha }}
      frontend-changes: ${{ steps.changes.outputs.frontend-changes }}
      backend-changes: ${{ steps.changes.outputs.backend-changes }}
      integration-changes: ${{ steps.changes.outputs.integration-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Analyze changes
        id: changes
        run: |
          # Get changed files
          changed_files=$(git diff --name-only HEAD~1 HEAD | tr '\n' ',' | sed 's/,$//')
          echo "changed-files=$changed_files" >> $GITHUB_OUTPUT
          
          # Get commit info
          commit_message=$(git log -1 --pretty=%s)
          commit_sha=$(git rev-parse --short HEAD)
          echo "commit-message=$commit_message" >> $GITHUB_OUTPUT
          echo "commit-sha=$commit_sha" >> $GITHUB_OUTPUT
          
          # Check if we have relevant changes
          if [ -n "$changed_files" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Analyze change types
          frontend_files="tuvens-docs/shared-protocols/frontend-integration/|tuvens-docs/integration-examples/frontend-integration/|tuvens-docs/claude-templates/"
          backend_files="tuvens-docs/implementation-guides/cross-app-authentication/|tuvens-docs/integration-guides/hi-events/api-requirements.md"
          integration_files="tuvens-docs/integration-guides/hi-events/|tuvens-docs/setup.sh"
          
          echo "frontend-changes=false" >> $GITHUB_OUTPUT
          echo "backend-changes=false" >> $GITHUB_OUTPUT  
          echo "integration-changes=false" >> $GITHUB_OUTPUT
          
          echo "$changed_files" | tr ',' '\n' | while read file; do
            if echo "$file" | grep -E "$frontend_files" > /dev/null; then
              echo "frontend-changes=true" >> $GITHUB_OUTPUT
            fi
            if echo "$file" | grep -E "$backend_files" > /dev/null; then
              echo "backend-changes=true" >> $GITHUB_OUTPUT
            fi
            if echo "$file" | grep -E "$integration_files" > /dev/null; then
              echo "integration-changes=true" >> $GITHUB_OUTPUT
            fi
          done

  notify-repositories:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: 
          - { name: "tuvens/tuvens-mobile", type: "mobile" }
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate repository-specific notification
        id: notification
        run: |
          repo_name="${{ matrix.repo.name }}"
          repo_type="${{ matrix.repo.type }}"
          changed_files="${{ needs.analyze-changes.outputs.changed-files }}"
          commit_message="${{ needs.analyze-changes.outputs.commit-message }}"
          commit_sha="${{ needs.analyze-changes.outputs.commit-sha }}"
          
          # Generate simple test issue
          title="🧪 TEST: Workflow Token Verification (${commit_sha})"
          
          # Create simple test issue body
          cat > notification.md << 'EOF'
          ## 🧪 Workflow Test Issue
          
          This is a **test issue** created to verify that the TUVENS_DOCS_TOKEN is working correctly.
          
          ### Test Details
          - **Repository**: tuvens/tuvens-mobile
          - **Commit**: COMMIT_SHA_PLACEHOLDER
          - **Message**: COMMIT_MESSAGE_PLACEHOLDER
          - **Changed Files**: CHANGED_FILES_PLACEHOLDER
          
          ### Status
          ✅ If you can see this issue, the workflow token is configured correctly!
          
          ### Next Steps
          - This issue can be closed once verified
          - The workflow will be restored to production templates after testing
          
          ---
          🤖 **Automated test issue from tuvens-docs workflow**
          EOF
          
          # Replace placeholders
          sed -i.bak "s|COMMIT_SHA_PLACEHOLDER|${commit_sha}|g" notification.md
          sed -i.bak "s|COMMIT_MESSAGE_PLACEHOLDER|${commit_message}|g" notification.md  
          sed -i.bak "s|CHANGED_FILES_PLACEHOLDER|${changed_files}|g" notification.md
          rm notification.md.bak
          
          echo "title=$title" >> $GITHUB_OUTPUT

      - name: Create notification issue
        continue-on-error: true  # Don't fail entire workflow if one repo fails
        env:
          GH_TOKEN: ${{ secrets.TUVENS_DOCS_TOKEN }}
        run: |
          echo "🔍 Testing TUVENS_DOCS_TOKEN access to ${{ matrix.repo.name }}"
          
          # Test basic repository access
          echo "Testing repository access..."
          if gh repo view "${{ matrix.repo.name }}" > /dev/null 2>&1; then
            echo "✅ Repository access: SUCCESS"
          else
            echo "❌ Repository access: FAILED"
            exit 1
          fi
          
          # Test issue listing permission
          echo "Testing issue listing permission..."
          issue_count=$(gh issue list --repo "${{ matrix.repo.name }}" --limit 1 --json number --jq 'length' 2>/dev/null || echo "error")
          if [ "$issue_count" != "error" ]; then
            echo "✅ Issue listing: SUCCESS (found $issue_count issues)"
          else
            echo "❌ Issue listing: FAILED"
          fi
          
          # Now try to create the test issue
          echo "Creating test issue in ${{ matrix.repo.name }}"
          if gh issue create \
            --repo "${{ matrix.repo.name }}" \
            --title "${{ steps.notification.outputs.title }}" \
            --body-file notification.md; then
            echo "✅ Successfully created issue in ${{ matrix.repo.name }}"
          else
            echo "❌ Failed to create issue in ${{ matrix.repo.name }}"
            echo "This may indicate missing token permissions or repository access"
            exit 1
          fi

  create-tracking-issue:
    needs: [analyze-changes, notify-repositories]
    if: needs.analyze-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create tracking issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          commit_sha="${{ needs.analyze-changes.outputs.commit-sha }}"
          commit_message="${{ needs.analyze-changes.outputs.commit-message }}"
          changed_files="${{ needs.analyze-changes.outputs.changed-files }}"
          
          # Create tracking issue body
          cat > tracking-issue.md << 'TRACKING_EOF'
          ## Documentation Update Distribution Tracking
          
          **Commit**: COMMIT_SHA_PLACEHOLDER
          **Message**: COMMIT_MESSAGE_PLACEHOLDER
          **Changed Files**: CHANGED_FILES_PLACEHOLDER
          
          ### Repository Notification Status
          - [ ] tuvens/eventdigest-ai - Issue created
          - [ ] tuvens/tuvens-client - Issue created  
          - [ ] tuvens/tuvens-api - Issue created
          - [ ] tuvens/hi.events - Issue created
          
          ### Integration Status
          This issue will be updated as repositories confirm integration of the documentation updates.
          
          **Expected Timeline**: All repositories should integrate within 1 week.
          
          ---
          *This tracking issue is automatically created when documentation updates are pushed to main.*
          TRACKING_EOF
          
          # Replace placeholders with actual values
          sed -i.bak "s|COMMIT_SHA_PLACEHOLDER|${commit_sha}|g" tracking-issue.md
          sed -i.bak "s|COMMIT_MESSAGE_PLACEHOLDER|${commit_message}|g" tracking-issue.md
          sed -i.bak "s|CHANGED_FILES_PLACEHOLDER|${changed_files}|g" tracking-issue.md
          rm tracking-issue.md.bak
          
          # Create tracking issue in tuvens-docs
          gh issue create \
            --title "🔄 Documentation Update Tracking (${commit_sha})" \
            --body-file tracking-issue.md \
            --label "tracking,documentation,automation"