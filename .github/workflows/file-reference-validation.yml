name: File Reference Validation

on:
  push:
    branches: [ dev, test, stage, main ]
    paths:
      - '**/*.md'
      - '**/*.js'
      - '**/*.json'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.sh'
      - '.claude/**'
      - 'agentic-development/**'
  pull_request:
    branches: [ dev, test, stage, main ]
    paths:
      - '**/*.md'
      - '**/*.js'
      - '**/*.json'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.sh'
      - '.claude/**'
      - 'agentic-development/**'
  workflow_dispatch:
    inputs:
      create_issue:
        description: 'Create GitHub issue for broken references'
        required: false
        default: 'true'
        type: boolean
      coverage_threshold:
        description: 'Minimum coverage percentage required'
        required: false
        default: '40'
        type: string

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: ${{ github.event.inputs.coverage_threshold || '40' }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  file-reference-validation:
    runs-on: ubuntu-latest
    name: Validate File References
    
    outputs:
      coverage-percentage: ${{ steps.scan.outputs.coverage-percentage }}
      broken-references-count: ${{ steps.scan.outputs.broken-references-count }}
      total-references: ${{ steps.scan.outputs.total-references }}
      should-block: ${{ steps.evaluate.outputs.should-block }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: |
          npm ci --silent
          
      - name: 🔍 Run File Reference Scan
        id: scan
        run: |
          echo "🔍 Running file reference scanner..."
          echo "Coverage Threshold: ${{ env.COVERAGE_THRESHOLD }}%"
          
          # Make scanner executable
          chmod +x agentic-development/scripts/file-reference-scanner.js
          
          # Run scanner with verbose output and capture results
          if node agentic-development/scripts/file-reference-scanner.js --verbose --output=file-reference-results.json; then
            scan_exit_code=0
          else
            scan_exit_code=$?
          fi
          
          # Parse results from JSON file
          if [ -f file-reference-results.json ]; then
            coverage_percentage=$(node -e "
              const data = require('./file-reference-results.json');
              console.log(data.coveragePercentage || 0);
            ")
            
            broken_count=$(node -e "
              const data = require('./file-reference-results.json');
              console.log(data.brokenReferenceCount || 0);
            ")
            
            total_references=$(node -e "
              const data = require('./file-reference-results.json');
              console.log(data.totalReferences || 0);
            ")
            
            template_count=$(node -e "
              const data = require('./file-reference-results.json');
              console.log(data.templateReferences || 0);
            ")
            
            echo "coverage-percentage=$coverage_percentage" >> $GITHUB_OUTPUT
            echo "broken-references-count=$broken_count" >> $GITHUB_OUTPUT
            echo "total-references=$total_references" >> $GITHUB_OUTPUT
            echo "template-references-count=$template_count" >> $GITHUB_OUTPUT
            echo "scan-exit-code=$scan_exit_code" >> $GITHUB_OUTPUT
            
            echo "📊 Scan Results:"
            echo "  Total References: $total_references"
            echo "  Template References: $template_count"
            echo "  Coverage: $coverage_percentage%"
            echo "  Broken References: $broken_count"
            
          else
            echo "❌ Scanner results file not found"
            echo "coverage-percentage=0" >> $GITHUB_OUTPUT
            echo "broken-references-count=999" >> $GITHUB_OUTPUT
            echo "total-references=0" >> $GITHUB_OUTPUT
            echo "template-references-count=0" >> $GITHUB_OUTPUT
            echo "scan-exit-code=1" >> $GITHUB_OUTPUT
          fi
          
      - name: 📊 Evaluate Results
        id: evaluate
        run: |
          coverage="${{ steps.scan.outputs.coverage-percentage }}"
          broken="${{ steps.scan.outputs.broken-references-count }}"
          threshold="${{ env.COVERAGE_THRESHOLD }}"
          templates="${{ steps.scan.outputs.template-references-count }}"
          
          should_block="false"
          
          echo "🔍 Evaluation:"
          echo "  Coverage: $coverage% (threshold: $threshold%)"
          echo "  Broken References: $broken"
          echo "  Template References: $templates"
          
          # Check if we should block the merge
          if (( broken > 0 )); then
            echo "❌ Blocking: Found $broken broken references"
            should_block="true"
          elif (( $(echo "$coverage < $threshold" | bc -l) )); then
            echo "❌ Blocking: Coverage $coverage% below threshold $threshold%"
            should_block="true"
          else
            echo "✅ Validation passed: Coverage $coverage%, No broken references"
          fi
          
          echo "should-block=$should_block" >> $GITHUB_OUTPUT
          
      - name: 📤 Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: file-reference-coverage-report-${{ github.run_number }}
          path: |
            file-reference-results.json
          retention-days: 30
          
      - name: 💾 Update Coverage Baseline
        if: github.ref == 'refs/heads/main' && steps.evaluate.outputs.should-block == 'false'
        run: |
          echo "💾 Updating coverage baseline for main branch..."
          
          # Copy results to baseline file
          cp file-reference-results.json .file-reference-coverage.json
          
          # Commit baseline update if there are changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet .file-reference-coverage.json; then
            echo "📊 No changes to coverage baseline"
          else
            git add .file-reference-coverage.json
            git commit -m "docs: update file reference coverage baseline [skip ci]
            
            Coverage: ${{ steps.scan.outputs.coverage-percentage }}%
            References: ${{ steps.scan.outputs.total-references }}
            Template References: ${{ steps.scan.outputs.template-references-count }}
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git push
          fi
          
      - name: ❌ Block PR if validation fails
        if: steps.evaluate.outputs.should-block == 'true'
        run: |
          echo "❌ File reference validation failed!"
          echo "Coverage: ${{ steps.scan.outputs.coverage-percentage }}% (required: ${{ env.COVERAGE_THRESHOLD }}%)"
          echo "Broken references: ${{ steps.scan.outputs.broken-references-count }}"
          
          if [ "${{ steps.scan.outputs.broken-references-count }}" -gt "0" ]; then
            echo ""
            echo "🔍 Please fix the broken file references before merging."
            echo "Check the uploaded artifact for detailed results."
          fi
          
          if (( $(echo "${{ steps.scan.outputs.coverage-percentage }} < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo ""
            echo "📊 File reference coverage is below the required threshold."
            echo "Current: ${{ steps.scan.outputs.coverage-percentage }}%"
            echo "Required: ${{ env.COVERAGE_THRESHOLD }}%"
          fi
          
          exit 1